import{dN as m,dO as p,dM as g,cz as y,dP as w,b0 as f,_ as b}from"./index.069aef39.js";class I{constructor(){this.code=null,this.description=null}}class _{constructor(t){this.error=new I,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function d(e){return new _(e)}class v{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function E(e){return new v(e)}const a=new Set;function V(e,t,n,h=!1,u){a.clear();for(const r in n){const i=e.get(r);if(!i)continue;const l=n[r],s=P(i,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:i,originalValue:l,sanitizedValue:s}}),a.add(i.name),i&&(h||i.editable)){const c=m(i,s);if(c)return d(p(c,i,s));t[i.name]=s}}for(const r of e.requiredFields)if(!a.has(r.name))return d(`missing required field "${r.name}"`);return null}function P(e,t){let n=t;return typeof t=="string"&&g(e)?n=parseFloat(t):t!=null&&y(e)&&typeof t!="string"&&(n=String(t)),w(n)}let o;function j(e,t){if(!e||!f(t))return e;if("rings"in e||"paths"in e){if(!o)throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function $(){return o||(o=await b(()=>import("./geometryEngineJSON2.1f82e538.js"),["geometryEngineJSON2.1f82e538.js","geometryEngineBase.82589031.js","geometryEngineJSON.5748d0ed.js","json.67c3770f.js"],import.meta.url),o)}async function z(e,t){!f(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await $()}export{E as c,V as d,j as h,d as u,z as y};
